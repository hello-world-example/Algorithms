<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Algorithms</title>
    <link>https://hello-world-example.github.io/Algorithms/docs/</link>
    <description>Recent content in Docs on Algorithms</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Algorithms/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Algorithms/docs/Sort/HeapSort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Algorithms/docs/Sort/HeapSort/</guid>
      <description>堆排序 二叉堆  小顶堆：父结点 &amp;lt;= 子节点；大顶堆：父结点 &amp;gt;= 子节点； 每个结点的左子树和右子树都是一个二叉堆
# 小顶堆 逻辑结构 10 ↙ ↘ 15 56 ↙ ↘ ↙ 25 30 70 # 存储结构 [10][15][56][25][30][70] __0___1___2___3___4___5 数组的第一个节点是堆顶
 节点 i 的 父节点：(i – 1) / 2 | (i - 1) &amp;gt;&amp;gt; 1
 节点 i 的 左节点：2 * i + 1 | i &amp;lt;&amp;lt; 1 + 1
 第一个节点的左节点 = 2*0+1 = 1 即 15  节点 i 的 右节点：2 * i + 2 | i &amp;lt;&amp;lt; 1 + 2</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Algorithms/docs/Sort/TimSort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Algorithms/docs/Sort/TimSort/</guid>
      <description>TimSort http://blog.kongfy.com/2012/10/%E8%AF%91%E7%90%86%E8%A7%A3timsort-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%EF%BC%9A%E9%80%82%E5%BA%94%E6%80%A7%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8Fadaptive-mergesort/
https://blog.csdn.net/on_1y/article/details/30109975
https://www.iteye.com/blog/ych0108-2280348</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Algorithms/docs/Tree/Basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Algorithms/docs/Tree/Basic/</guid>
      <description>基础操作 二叉树 Binary Tree  每个结点至多只有二个子节点 第 i 层至多有 2i-1 个结点  第一层 21-1 = 1 个节点 第二层最多 22-1 = 2 个节点  i 层树至多有 2i-1 个结点  第二层最多 22 -1= 3 个节点 第三层最多 23 -1= 7 个节点  假设二叉树节点以数据方式存储  节点 i 的 左节点：2 * i + 1 | i &amp;lt;&amp;lt; 1 + 1 节点 i 的 右节点：2 * i + 2 | i &amp;lt;&amp;lt; 1 + 2 节点 i 的 父节点：(i – 1) / 2 | (i - 1) &amp;gt;&amp;gt; 1   满二叉树  所有结点都有两个子结点 节点数达到最大值，即 2i-1 个结点  完全二叉树  假设二叉树的深度为 i，则 0 ~ i-1 层的树为 满二叉树 第 i 层所有的结点都连续集中在最左边  二叉查找树 BST Binary Search Tree ： 二叉查找树 / 二叉排序树 / 二叉搜索树</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Algorithms/docs/Tree/HeapTree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Algorithms/docs/Tree/HeapTree/</guid>
      <description>二叉堆  二叉堆是一颗 完全二叉树 左右子节点并无大小之分，只与父节点有大小之分，搜索树则不同：父节点大于左子树，小于右子树  大顶堆：大于等于 其孩子节点的值 小顶堆：小于等于 其孩子节点的值  每个节点的子树都是堆树 堆树不同于搜索树，并不善于用来查找元素，主要用来找最大或最小值 或 最大或最小优先级的节点  堆树的结构 # 存储结构 [10][15][56][25][30][70] __0___1___2___3___4___5 [10][15][56][25][30][70] __0___1___2___3___4___5___6  假如数组的 0号元素是堆顶，则： 节点 i 的 父节点：(i – 1) / 2 | (i - 1) &amp;gt;&amp;gt; 1 节点 i 的 左节点：2 * i + 1 | i &amp;lt;&amp;lt; 1 + 1
 第一个节点的左节点 = 2 * 0 + 1 = 1 即 15  节点 i 的 右节点：2 * i + 2 | i &amp;lt;&amp;lt; 1 + 2</description>
    </item>
    
  </channel>
</rss>